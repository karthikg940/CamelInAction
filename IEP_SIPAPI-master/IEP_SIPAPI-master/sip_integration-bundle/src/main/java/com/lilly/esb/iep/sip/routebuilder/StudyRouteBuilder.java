/**
* Copyright (c) 2017 Eli Lilly and Company.  All rights reserved.
*/

package com.lilly.esb.iep.sip.routebuilder;

import java.net.HttpURLConnection;
import java.util.ArrayList;
import java.util.List;

import javax.ws.rs.core.MediaType;

import org.apache.camel.Exchange;
import org.apache.camel.builder.PredicateBuilder;
import org.apache.camel.component.http4.HttpMethods;

import com.lilly.esb.iep.common.util.IepGlobalConstants;
import com.lilly.esb.iep.sip.aggregator.ExceptionAggregator;
import com.lilly.esb.iep.sip.aggregator.SharePointEntryAggregator;
import com.lilly.esb.iep.sip.constants.Constants;

/**
 * 
 * Gets data from sharepoint ,Odata url and process the data ,construct the
 * payload and make calls to external sip api's.
 * 
 * @author C241254
 *
 */
public class StudyRouteBuilder extends AbstractSipRouteBuilder {

	@Override
	public void configure() throws Exception {


		 from("wmqIn:queue:{{com.lilly.esb.iep.sip.reference.scheduler.queue}}")
				.wireTap(dispatchUri("START_STUDY_SPONSOR_PROCESS", false))
	 		.log("Received the Trigger from Scheduler")
			.processRef("trackerProcessor")
			.setProperty(Constants.STUDY_BREADCRUMB_ID,header(Exchange.BREADCRUMB_ID))
			.beanRef("triggerValidator","processSchedulerTime")
			.setProperty(Constants.SCHEDULER_TIME_FLAG,body())
			.choice()
				.when(property(Constants.SCHEDULER_TIME_FLAG).isEqualTo(Boolean.TRUE))
					.log("It is 4 hour Trigger")
					.wireTap(dispatchUri("FOUR_HOURS_TRIGGER", false))
					.to("direct:process-sip-studySharePoint-call").id("process-study-sharePoint")
				.endChoice()
				.otherwise()
					.log("It is 15 mts Trigger")
					.wireTap(dispatchUri("15_MINS_TRIGGER", false))
					.to("direct:process-sip-study-batchControl")
				.endChoice()
			.end()
		;

		from("direct:process-sip-study-batchControl")
			.routeId("process-sip-study-batchControl")
			.wireTap(dispatchUri("START_BATCH_CONTROL_PROCESS", false))
			.setHeader(Constants.CURRENT_TIME_STAMP,simple("${date:now:yyyy-MM-dd HH:mm:ss}"))
			.setBody()
			.constant("{{com.lilly.esb.iep.sip.batchcontrol.query.select}}")
			.log("Received the SQL query for Batch Control Table")
			.to("jdbc:dataSource").id("batch-control-select")
			.setHeader("EndTime", simple("${body}"))
			.beanRef("triggerValidator", "processBatchControlTime")
			.choice()
				.when(property(Constants.DB_RESULT).isNotEqualTo(Constants.IS_EMPTY))
					.log("There is a record available for SIP.STUDY in Batch Control Table")
					.to("direct:process-sip-studySharePoint-call")
				.endChoice()
				.otherwise()
					.setBody()
					.constant("{{com.lilly.esb.iep.sip.batchcontrol.query.insert}}")
					.log("No Record for SIP.STUDY in Batch Control Table hence inserting")
					.wireTap(dispatchUri("INSERT_RECORD_IN_TABLE", false))
					.to("jdbc:dataSource").to("direct:process-sip-studySharePoint-call").id("batch-control-insert")
				.endChoice()
			.end()
		;

		from("direct:process-sip-studySharePoint-call").errorHandler(noErrorHandler())
			.routeId("process-sip-studySharePoint-call")
			.processRef("exchangeProcessor") 
			.setHeader(Exchange.BREADCRUMB_ID,property(Constants.STUDY_BREADCRUMB_ID))
			.wireTap(dispatchUri("START_STUDY_PROCESS", false))
			.processRef("sharePointBasicAuthHeaderProcessor")
			.log("Calling Study SP list")
			.inOut("https4://{{com.lilly.esb.iep.sip.studylist.site}}?throwExceptionOnFailure=false")
			.convertBodyTo(String.class)
			.to("direct:process-sip-initial-response-status-code")
			.choice()
				.when(header(Exchange.HTTP_RESPONSE_CODE).isNotEqualTo(constant(HttpURLConnection.HTTP_OK)))
					.log("Study sharepoint data is not avaliable")	
					.wireTap(dispatchUri("NON_200_HTTP_RES_FRM_STUDY_SHAREPOINT", false))
					.to("direct:sip-sponsor-processor")
					.setProperty(Constants.SPONSOR_SERVICE_NOW_TICKET_LIST,simple("${body}"))
					.convertBodyTo(List.class)
					.to("direct:process-service-now-ticket")
					.to("direct:process-batch-control-update")
				.endChoice()
				.otherwise()
					.wireTap(dispatchUri("STUDY_SHAREPOINT_PAYLOAD", true))
					.to("direct:process-sip-studySharePoint-payload")
				.endChoice()
			.end()
		;
		
		from("direct:process-sip-studySharePoint-payload")
			.log("Study SP list data available")
			.setProperty(IepGlobalConstants.IEP_PROPERTY_ORIGINAL_MESSAGE,body())
			.choice()
				.when(PredicateBuilder.or(header(Constants.SCHEDULER_TIME_FLAG).isEqualTo(Boolean.TRUE), property(Constants.PROCESS_STUDY_LIST).isEqualTo(Boolean.TRUE)))
					.wireTap(dispatchUri("SCHEDULER_TIME_FLAG_TRUE", false))
					.to("direct:process-sip-studyRecords")
				.endChoice()
				.otherwise()
					.to("direct:process-sip-verify-study-record-update-time")
				.endChoice()
			.end()
		;
		

		from("direct:process-sip-verify-study-record-update-time")
			.routeId("process-sip-verify-study-record-update-time")
			.wireTap(dispatchUri("VERIFY_STUDY_RECORD_UPDATE_TIME", false))
			.setBody(xpath("/base:feed/base:entry/base:updated").namespace("base", "http://www.w3.org/2005/Atom"))
			.log("Check if any study entry in the SP list is modified in the last 15 mts")
			.split(body(), new SharePointEntryAggregator())
			.setBody(xpath("/base:updated/text()").namespace("base","http://www.w3.org/2005/Atom"))
			.beanRef("triggerValidator", "processEntryUpdatedTime").end()
			.choice()
				.when(body().regex(".*true.*"))
					.wireTap(dispatchUri("SHAREPOINT_RECORD_UPDATED", false))
					.to("direct:process-sip-studyRecords")
				.endChoice()
				.otherwise()
					.log("no record is updated in last 15 mins")
					.wireTap(dispatchUri("NO_RECORD_UPDATED_IN_LAST_15_MINS", false))
					.to("direct:sip-sponsor-processor")
					.setProperty(Constants.SPONSOR_SERVICE_NOW_TICKET_LIST,simple("${body}"))
					.convertBodyTo(List.class)
					.to("direct:process-service-now-ticket")
					.to("direct:process-batch-control-update")
				.endChoice()
			.end()					
		;

		from("direct:process-sip-studyRecords")
			.routeId("process-sip-studyRecords").errorHandler(noErrorHandler())
			.log("Calling PI mapping SP")
			.to("direct:PrimaryInvestigatorIDSharePointCall")
			.log("Calling Facility mapping SP")
			.to("direct:FacilityIDSharePointCall")
			.setBody(property(IepGlobalConstants.IEP_PROPERTY_ORIGINAL_MESSAGE))
			.setBody(xpath("//m:properties").saxon().namespace("m","http://schemas.microsoft.com/ado/2007/08/dataservices/metadata"))
			.log("Calling split on the Study SP list entries")
			.setProperty(Constants.SPONSOR_CREATE_FAILURE_FLAG,constant(false))
			.split(body(),new ExceptionAggregator()).stopOnException()
				.wireTap(dispatchUri("STUDY_SHAREPOINT_PAYLOAD_AFTER_SPLIT", true))
				.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(false))
				.setProperty(Constants.BREADCRUMB_TRIAL_ID,xpath("//d:TrialNumber/text()").namespace("d",
								"http://schemas.microsoft.com/ado/2007/08/dataservices"))
				.unmarshal("jaxbDataFormatStudy")
				.log("Unmarshalling Study SP list entry")
				.log("Validating Study SP list entry")
				.processRef("studyAttributesProcessor")
				.setProperty(Constants.BREADCRUMB_ID, header(Exchange.BREADCRUMB_ID).append("_").append("STUDY").append("_").append(property(Constants.BREADCRUMB_TRIAL_ID)))
				.setHeader(Exchange.BREADCRUMB_ID,property(Constants.BREADCRUMB_ID))
				.choice()
					.when(property(Constants.TO_PROCESS).isEqualTo("Y"))
						.doTry()
							.to("validator:schema/SharePointSchema.xsd")
						.doCatch(Exception.class)
						.end()
						.log("trail number is ${property.TrailNumber}")
						.to("direct:sip-check-study-validation-error")
					.endChoice()
					.otherwise()
						.log("To Process is N")
						.wireTap(dispatchUri("TO_PROCESS_N", false))
					.endChoice()
				.end()
			.end()
			.setProperty(Constants.STUDY_SERVICE_NOW_TICKET_LIST,simple("${body}"))
			.setProperty(Exchange.EXCEPTION_CAUGHT, constant(null))
			.log("sent to sponser route")
			.to("direct:sip-sponsor-processor")				
			.setProperty(Constants.SPONSOR_SERVICE_NOW_TICKET_LIST,simple("${body}"))
			.convertBodyTo(List.class)
			.to("direct:process-service-now-ticket")
			.to("direct:process-batch-control-update")
		;	
		
		from("direct:sip-check-study-validation-error")
			.wireTap(dispatchUri("INSIDE_CHECK_VALDIATION_EXCEPTION_ROUTE", true))
			.choice()
				.when(property(Exchange.EXCEPTION_CAUGHT).isNull())
					.log("Placing Study OData call")
					.to("direct:process-sip-CreateStudy-OdataCall")
				.endChoice()
				.otherwise()
					.wireTap(dispatchUri("STOPPED_STUDY_ON_VALIDATION_EXCEPTION", false))
					.log("stopped on exception")
				.endChoice()
			.end();
		
		from("direct:process-sip-StudySite-Call").routeId("process-sip-StudySite-Call")
			.choice()
				.when(property(Constants.SHAREPOINT_FLAG).isNotEqualTo(Boolean.FALSE))
					.wireTap(dispatchUri("SHAREPOINT_FLAG_TRUE", false))
					.to("direct:process-sip-StudySite")
					.to("direct:closeStudy")
				.endChoice()
				.otherwise()
					.log("primary and facility sharepoint data is not available")
					.wireTap(dispatchUri("PI_AND_FACILITY_SP_NOT_AVAILABLE", false))
					.to("direct:closeStudy")
				.endChoice()
			.end()
		;

		from("direct:process-sip-CreateStudy-OdataCall").routeId("process-sip-CreateStudy-OdataCall").errorHandler(noErrorHandler())
			.log("inside Study odata url route")
			.wireTap(dispatchUri("MAKE_CREATE_STUDY_ODATA_CALL", false))
			.processRef("exchangeProcessor")
			.setHeader(Exchange.BREADCRUMB_ID,property(Constants.BREADCRUMB_ID))
			.processRef("oDataBasicAuthHeaderProcessor")
			.setHeader(Constants.PAGE_SIZE_OVERRIDE,constant(0))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.GET)
			.setHeader(Exchange.HTTP_QUERY,simple("{{com.lilly.esb.iep.sip.createStudy.odata.url.query}} '${property.TrailNumber}'"))
			.inOut("https4://{{com.lilly.esb.iep.sip.createStudy.odata.url}}?throwExceptionOnFailure=false")
			.convertBodyTo(String.class)
			.to("direct:process-sip-initial-response-status-code")
			.wireTap(dispatchUri("CREATE_STUDY_ODATA_CALL_PAYLOAD", true))
			.choice()
				.when(header(Exchange.HTTP_RESPONSE_CODE).isNotEqualTo(constant(HttpURLConnection.HTTP_OK)))
					.log("create study odata url respone !=200")
					.wireTap(dispatchUri("NON_200_HTTP_RES_FRM_CREATE_STUDY_ODATA",false))
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
				.endChoice()
				.otherwise()
					.removeHeader(Exchange.HTTP_QUERY)
					.setProperty(Constants.UNIQUE_SPONSER_SITE_USER_ID, simple("{{com.lilly.esb.iep.sip.uniqueSponsorSiteUserID.property}}"))
					.to("direct:process-sip-CreateStudy-OdataCall-payload")
				.endChoice()
			.end()
		;
	
		from("direct:process-sip-CreateStudy-OdataCall-payload")
			.unmarshal("jacksonDataFormat")
			.setBody(simple("${body[value]}"))
			.choice()
				.when(PredicateBuilder.in(body().isEqualTo("[]"), body().isNull(),body().regex("^\\s*$")))
					.wireTap(dispatchUri("CREATE_STUDY_ODATA_CALL_IS_EMPTY", false))
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
					.log("Study ODATA response  is empty for TrailNumber ${property.TrailNumber}")
				.endChoice()					
				.otherwise()
					.processRef("studyProcessor")
					.to("direct:process-sip-createCompound")
					.log("response body in compound aggregator ${body}")
					.choice()
						.when(body().regex(".*false.*"))
							.wireTap(dispatchUri("COMPOUND_CREATION_FAILED", false))
							.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
							.log("compound creation failed")
						.endChoice()
						.otherwise()
							.log("send to indiaction")
							.to("direct:process-sip-createIndication")
						.endChoice()
					.end()
				.endChoice()
			.end()
		;	

		from("direct:process-sip-createCompound").routeId("process-sip-createCompound")
			.setBody(property(Constants.COMPOUND_PAYLOAD))
			.wireTap(dispatchUri("START_CREATE_COMPOUND", false))
			.split(body(),new SharePointEntryAggregator())
			.beanRef("odmPayloadBean", "constructCompoundCreationPayload")
			.log("external api call compound output/response  ${body}")
			.choice()
				.when(PredicateBuilder.in(body().regex("^\\s*$"),body().isNull()))
					.log("no compound payload is avaliable for TrailNumber ${property.TrailNumber}")
					.wireTap(dispatchUri("COMPOUND_PAYLOAD_EMPTY", false))
					.setBody(constant(false))
				.endChoice()					
				.otherwise()
					.setProperty(Constants.COMPOUND_PAYLOAD,body())
					.to("direct:process-sip-createCompound-externalAPICall").id("compound-externalAPICall")
				.endChoice()
			.end()
		;
		
		from("direct:process-sip-createCompound-externalAPICall")
			.log("inside process-sip-createCompound-externalAPICall route")
			.wireTap(dispatchUri("MAKE_CREATE_COMPOUND_EXT_API_CALL", false))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.businessentities.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.wireTap(dispatchUri("COMPOUND_CREATED_SUCCESSFULLY",false))
					.log("compound created successfully")	
					.setBody(constant(true))
				.endChoice()
				.when(header(Constants.EXTERNAL_API_DUPLICATE_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.to("direct:process-sip-updateCompound-externalAPICall")
				.endChoice()
				.otherwise()
					.log("compound creation failed")
					.setBody(constant(false))
				.endChoice()
			.end()				
		;
		
		from("direct:process-sip-updateCompound-externalAPICall")
			.log("inside process-sip-updateCompound-externalAPICall route")
			.wireTap(dispatchUri("MAKE_UPDATE_COMPOUND_EXT_API_CALL", false))
			.setBody(property(Constants.COMPOUND_PAYLOAD))
			.log("update compound payload is ${body}")
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.update.businessentities.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.wireTap(dispatchUri("COMPOUND_UPDATED", false))
					.log("compound updated successfully")
					.setBody(constant(true))
				.endChoice()
				.otherwise()
					.wireTap(dispatchUri("COMPOUND_UPDATE_FAILED", false))
					.log("Compound update failed")
					.setBody(constant(false))
				.endChoice()
			.end()				
		;
		

		from("direct:process-sip-createIndication")
			.routeId("process-sip-createIndication")
			.wireTap(dispatchUri("START_CREATE_INDICATION", false))
			.beanRef("odmPayloadBean", "constructIndicationCreationPayload")
			.log("Indication odm payload is ${body}")
			.choice()
				.when(PredicateBuilder.in(body().regex("^\\s*$"),body().isNull()))
					.wireTap(dispatchUri("INDICATION_PAYLOAD_EMPTY", false))
					.log("create Indication payload is empty for TrailNumber ${property.TrailNumber}")
				.endChoice()
				.otherwise()
					.setProperty(Constants.INDICATION_PAYLOAD,body())
					.to("direct:process-sip-createIndication-externalAPICall").id("indication-externalAPICall")
				.endChoice()
			.end()
		;
		
		from("direct:process-sip-createIndication-externalAPICall")
			.log("inside process-sip-createIndication-externalAPICall route")
			.wireTap(dispatchUri("MAKE_CREATE_INDICATION_EXT_API_CALL", false))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.businessentities.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.wireTap(dispatchUri("INDICATION_CREATED_SUCCESSFULLY", false))
					.log("Indication created successfully")
					.to("direct:process-sip-createProgram")
				.endChoice()
				.when(header(Constants.EXTERNAL_API_DUPLICATE_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.to("direct:process-sip-updateIndication-externalAPICall")
				.endChoice()
				.otherwise()
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
					.wireTap(dispatchUri("INDICATION_FAILED", false))
					.log("Indication creation failed")
				.endChoice()
			.end()
		;
		
		from("direct:process-sip-updateIndication-externalAPICall")
			.log("inside process-sip-updateIndication-externalAPICall route")
			.wireTap(dispatchUri("MAKE_UPDATE_INDICATION_EXT_API_CALL", false))
			.setBody(property(Constants.INDICATION_PAYLOAD))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.update.businessentities.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.log("Indication updated successfully")
					.wireTap(dispatchUri("INDICATION_UPDATED_SUCCESSFULLY", false))
					.to("direct:process-sip-createProgram")
				.endChoice()
				.otherwise()
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
					.wireTap(dispatchUri("INDICATION_UPDATE_FAILED", false))
					.log("Indication update failed")
				.endChoice()
			.end()
		;

		from("direct:process-sip-createProgram")
			.routeId("process-sip-createProgram")
			.wireTap(dispatchUri("START_CREATE_PROGRAM", false))
			.beanRef("odmPayloadBean", "constructProgramCreationPayload")
			.log("Program odm payload is ${body}")
			.choice()
				.when(PredicateBuilder.in(body().regex("^\\s*$"),body().isNull()))
					.wireTap(dispatchUri("PROGRAM_PAYLOAD_EMPTY", false))
					.log("create program payload is empty for TrailNumber ${property.TrailNumber}")
				.endChoice()
				.otherwise()
					.setProperty(Constants.PROGRAM_PAYLOAD, body())
					.to("direct:process-sip-createProgram-externalAPICall").id("program-externalAPICall")
				.endChoice()
			.end()				
		;
		
		from("direct:process-sip-createProgram-externalAPICall")
			.log("inside process-sip-createProgram-externalAPICall route")
			.wireTap(dispatchUri("MAKE_CREATE_PROGRAM_EXT_API_CALL", false))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.businessentities.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.wireTap(dispatchUri("PROGRAM_CREATED_SUCCESSFULLY", false))
					.log("Program created successfully")
					.to("direct:process-sip-createStudy")
				.endChoice()
				.when(header(Constants.EXTERNAL_API_DUPLICATE_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.to("direct:process-sip-updateProgram-externalAPICall")
				.endChoice()					
				.otherwise()
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
					.wireTap(dispatchUri("PROGRAM_CREATION_FAILED", false))
					.log("Program creation failed")
				.endChoice()
			.end()
		;
		
		from("direct:process-sip-updateProgram-externalAPICall")
			.log("inside process-sip-updateProgram-externalAPICall route")
			.wireTap(dispatchUri("MAKE_UPDATE_PROGRAM_EXT_API_CALL", false))
			.setBody(property(Constants.PROGRAM_PAYLOAD))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.update.businessentities.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.log("Program updated successfully")
					.wireTap(dispatchUri("PROGRAM_UPDATED_SUCCESSFULLY", false))
					.to("direct:process-sip-createStudy")
					.log("process-sip-createStudy")
				.endChoice()
				.otherwise()
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
					.wireTap(dispatchUri("PROGRAM_UPDATE_FAILED", false))
					.log("Program update failed")
				.endChoice()
			.end()
		;
		
		from("direct:process-sip-createStudy")
			.routeId("process-sip-createStudy")
			.wireTap(dispatchUri("START_CREATE_STUDY", false))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setBody(property(IepGlobalConstants.IEP_PROPERTY_ORIGINAL_MESSAGE))
			.log("create external SIP study payload is ${body}")
			.choice()
				.when(PredicateBuilder.in(body().regex("^\\s*$"),body().isNull()))
					.wireTap(dispatchUri("CREATE_STUDY_PAYLOAD_EMPTY", false))
					.log("create study payload is empty for TrailNumber ${property.TrailNumber}")
				.endChoice()
				.otherwise()
					.to("direct:process-sip-createStudy-externalAPICall").id("study-externalAPICall")
					.log("process-sip-createStudy-externalAPICall")
				.endChoice()
			.end()
		;

		from("direct:process-sip-createStudy-externalAPICall")
			.log("inside process-sip-createStudy-externalAPICall route")
			.wireTap(dispatchUri("MAKE_CREATE_STUDY_EXT_API_CALL", false))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.createStudy.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.log("study created successfully")
					.to("direct:process-sip-StudySite-Call")
				.endChoice()
				.when(header(Constants.EXTERNAL_API_DUPLICATE_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.log("study already exists")
					.to("direct:process-sip-StudySite-Call")
				.endChoice()
				.otherwise()
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
					.log("study creation failed")
				.endChoice()
			.end()
		;

		from("direct:sip-externalAPICall").errorHandler(noErrorHandler()).routeId("sip-externalAPICall")
			.log("inside the external API call route")
			.wireTap(dispatchUri("POSTING_PAYLOAD_TO_EXTERNAL_SIP_CALL",true))
			.setHeader(Constants.EXTERNAL_API_RESPONSE_FLAG, constant(false))
			.setHeader(Constants.EXTERNAL_API_DUPLICATE_RESPONSE_FLAG, constant(false))
			.setHeader(Exchange.CONTENT_TYPE,simple(MediaType.APPLICATION_XML + ";charset=UTF-8"))
			.processRef("sharePointBasicAuthHeaderProcessor")
			.inOut("https://{{com.lilly.esb.iep.sip.external.api.proxy.url}}?throwExceptionOnFailure=false")
			.convertBodyTo(String.class)
			.log("response from external call ${body}")
			.wireTap(dispatchUri("RES_FRM_EXTERNAL_SIP_CALL", true))
			.to("direct:process-sip-initial-response-status-code")
			.choice()
				.when(header(Exchange.HTTP_RESPONSE_CODE).isNotEqualTo(constant(HttpURLConnection.HTTP_OK)))
					.log("Http reponse from external sip call is !=200")
					.wireTap(dispatchError("NON_200_HTTP_RES_FRM_EXT_SIP_CALL", true))
					.throwException(new Exception("NON_200_HTTP_RES_FRM_EXT_SIP_CALL"))
				.endChoice()
				.when(body().isEqualTo("Invalid request"))
					.log("Invalid request response from the external call")
					.wireTap(dispatchUri("INVALID_REQUEST_FRM_EXT_CALL", false))
				.endChoice()
				.otherwise()
					.to("direct:process-external-api-response")
				.endChoice()
			.end()
		;
		
		
		from("direct:process-sip-initial-response-status-code").errorHandler(noErrorHandler()).routeId("direct-process-SIP-initial-response-status-code")
	     	.choice()
	     		.when(header(Exchange.HTTP_RESPONSE_CODE).isNull())
	     			.wireTap(dispatchUri("REC_NULL_HTTP_RESP_CODE", true)).id("null-response-code-wiretap")
	     		.endChoice()
	     		.when(header(Exchange.HTTP_RESPONSE_CODE).isEqualTo(constant(HttpURLConnection.HTTP_OK)))
					.wireTap(dispatchUri("REC_200_HTTP_CODE_FROM_SIP", true)).id("200-response-code-wiretap")
				.endChoice()
				.when(header(Exchange.HTTP_RESPONSE_CODE).isEqualTo(constant(HttpURLConnection.HTTP_BAD_REQUEST)))
					.wireTap(dispatchUri("REC_400_HTTP_CODE_FROM_SIP", true)).id("400-response-code-wiretap")
				.endChoice()
				.when(header(Exchange.HTTP_RESPONSE_CODE).isEqualTo(constant(HttpURLConnection.HTTP_UNAUTHORIZED)))
					.wireTap(dispatchUri("REC_401_HTTP_CODE_FROM_SIP", true)).id("401-response-code-wiretap")
				.endChoice()
				.when(header(Exchange.HTTP_RESPONSE_CODE).isEqualTo(constant(HttpURLConnection.HTTP_BAD_METHOD)))
					.wireTap(dispatchUri("REC_405_HTTP_CODE_FROM_SIP", true)).id("405-response-code-wiretap")
				.endChoice()
				.when(header(Exchange.HTTP_RESPONSE_CODE).isEqualTo(constant(HttpURLConnection.HTTP_INTERNAL_ERROR)))
					.wireTap(dispatchUri("REC_500_HTTP_CODE_FROM_SIP", true)).id("500-response-code-wiretap")
				.endChoice()
	     		.otherwise()
	     			.wireTap(dispatchUri("REC_BAD_HTTP_CODE_FROM_SIP", true)).id("unknown-response-code-wiretap")
				.endChoice()
			.end()
		;

		 
		from("direct:process-external-api-response")
			.id("process-external-api-response")
			.setBody(xpath("//sip:errorID/text()").namespace("sip","http://www.sharedinvestigator.com/sip/schema"))
			.log("error code from external api call ${body}")
			.choice()
				.when(body().isEqualTo("GEN_ERR_01"))
					.wireTap(dispatchUri("ERR_01_VALIDATION_FAIL_FRM_EXT_API", false))
					.log("Validation Failure")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_02"))
					.wireTap(dispatchUri("ERR_02_ENTITY_NOT_FOUND_FRM_EXT_API", false))
					.log("Entity Not Found")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_03"))
					.wireTap(dispatchUri("ERR_03_SER_INVOCATION_EXCEP_FRM_EXT_API", false))
					.log("Service Invocation Exception")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_04"))
					.wireTap(dispatchUri("ERR_04_INVALID_REQUEST_FRM_EXT_API", false))
					.log("Invalid Request")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_05"))
					.wireTap(dispatchUri("ERR_05_OPERATION_NOT_SUPPORTED_FRM_EXT_API", false))
					.log("Operation Not Supported")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_06"))
					.wireTap(dispatchUri("ERR_06_EXT_SER_INVOCATION_ERR_FRM_EXT_API", false))
					.log("External Service Invocation Error")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_07"))
					.wireTap(dispatchUri("GEN_ERR_07_DUPLICATE_ENTITY_FRM_EXT_API_CALL", false))
					.log("Duplicate Entity")
					.setHeader(Constants.EXTERNAL_API_DUPLICATE_RESPONSE_FLAG, constant(true))
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_08"))
					.wireTap(dispatchUri("ERR_08_NUMBER_FORMAT_ERR_FRM_EXT_API", false))
					.log("Number Format Error")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_09"))
					.wireTap(dispatchUri("ERR_09_TECHNICAL/GEN_SERVICE_ERR_FRM_EXT_API", false))
					.log("General Service Error / Technical Error")
				.endChoice()
				.when(body().isEqualTo("GEN_ERR_10"))
					.wireTap(dispatchUri("ERR_10_UNKNOWN_ERROR_FRM_EXT_API", false))
					.log("Unknown Error")
				.endChoice()
				.otherwise()
					.setHeader(Constants.EXTERNAL_API_RESPONSE_FLAG, constant(true))
				.endChoice()
			.end()
		;
		

		from("direct:closeStudy").routeId("closeStudy")
			.processRef("exchangeProcessor")
			.setHeader(Exchange.BREADCRUMB_ID,property(Constants.BREADCRUMB_ID))
			.wireTap(dispatchUri("START_CLOSE_STUDY", false))
			.choice()
				.when(PredicateBuilder.and(property(Constants.STUDY_CLOSURE_DATE).regex(".+"),property(Constants.STUDY_CLOSURE_DATE).isNotNull()))
					.log("close study for closerDate")
					.to("direct:process-sip-closeStudy")
				.endChoice()
				.when(PredicateBuilder.and(property(Constants.STUDY_CANCELLED_DATE).regex(".+"), property(Constants.STUDY_CANCELLED_DATE).isNotNull()))
					.log("close study for cancel date")
					.to("direct:process-sip-closeStudy")
				.endChoice()
				.otherwise()
					.wireTap(dispatchUri("CLOSE_STUDY_FAILED", false))
					.log("close study failed ${body}")
				.endChoice()
			.end()
		;
		
		from("direct:process-sip-closeStudy").routeId("process-sip-closeStudy")
			.log("inside the close study response route")
			.beanRef("odmPayloadBean", "constructCloseStudyPayload")
			.log("study close payload is ${body}")
			.wireTap(dispatchUri("MAKE_CLOSE_STUDY_SITE_EXT_API_CALL", false))
			.setHeader(Exchange.HTTP_METHOD, HttpMethods.POST)
			.setHeader(IepGlobalConstants.IEP_HEADER_CALLBACK_URL,simple("{{com.lilly.esb.iep.sip.closeStudy.external.api.url}}"))
			.to("direct:sip-externalAPICall")
			.choice()
				.when(header(Constants.EXTERNAL_API_RESPONSE_FLAG).isEqualTo(Boolean.TRUE))
					.log("study  close is successfully")
					.wireTap(dispatchUri("CLOSE_STUDY_IS_SUCCESS", false))
				.endChoice()
				.otherwise()
					.log("unsuccessful study  close")
					.setProperty(Constants.STUDY_CREATE_FAILURE_FLAG,constant(true))
					.wireTap(dispatchUri("CLOSE_STUDY_FAILED", false))
				.endChoice()
			.end()
		;


		from("direct:sip-stop-process")
			.log("inside stop process route")
			.wireTap(dispatchUri("STOP_CONTEXT_FOR_NON_200_RES", false))
			.stop()
			.end()
		;
		
		from("direct:process-service-now-ticket")
		.beanRef("triggerValidator", "aggregateException")
		.wireTap(dispatchUri("INSIDE_PROCESS_SERVICE_NOW_TICKET", false))
		.setProperty(Constants.SERVICE_NOW_TICKET_LIST,simple("${body}"))
		.convertBodyTo(String.class)
		.wireTap(dispatchUri("SERVICE_NOW_TICKET_BODY", true))
			.choice()
				.when(PredicateBuilder.in(body().isEqualTo("[]"), body().isNull(),body().regex("^\\s*$")))
					.wireTap(dispatchUri("SERVICE_NOW_TICKET_LIST_IS_EMPTY", false))
					.log("Service Now Ticket List is empty")
				.endChoice()
				.otherwise()
					.wireTap(dispatchError("SERVICE_NOW_TICKET_LIST", true))
					.log("Service Now Ticket raised for list ${property.ServiceNowTicketList}")
				.endChoice()
			.end();
		
		from("direct:process-batch-control-update")
			.setHeader("EndTime",simple("${date:now:dd-mmm-yyyy HH:mm:ss}"))
			.setBody(simple("{{com.lilly.esb.iep.sip.batchcontrol.query.update}}"))
			.wireTap(dispatchUri("UPDATE_RECORD_IN_TABLE", false))
			.to("jdbc:dataSource")
			.log("batch control update completed");

	}
}